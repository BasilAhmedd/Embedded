
gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000484  0800048c  0000148c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000484  08000484  0000148c  2**0
                  CONTENTS
  4 .ARM          00000000  08000484  08000484  0000148c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000484  0800048c  0000148c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000484  08000484  00001484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000488  08000488  00001488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000148c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800048c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800048c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000510  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000245  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005e  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fe9  00000000  00000000  00001d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000666  00000000  00000000  00002cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003ebc  00000000  00000000  00003355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00007211  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000015c  00000000  00000000  00007254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000073b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800046c 	.word	0x0800046c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800046c 	.word	0x0800046c

080001d4 <main>:
// Simple delay function
void delay(uint32_t time) {
    for (uint32_t i = 0; i < time * 1000; i++);
}

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af02      	add	r7, sp, #8
    // Enable clock for GPIOA and GPIOB
    GPIO_EnableClock(GPIOA);
 80001da:	4816      	ldr	r0, [pc, #88]	@ (8000234 <main+0x60>)
 80001dc:	f000 f82e 	bl	800023c <GPIO_EnableClock>
    GPIO_EnableClock(GPIOB);
 80001e0:	4815      	ldr	r0, [pc, #84]	@ (8000238 <main+0x64>)
 80001e2:	f000 f82b 	bl	800023c <GPIO_EnableClock>

    // Configure PA2 as output for LED
    GPIO_Init(GPIOA, 2, 0x1, 0x0, 0x0, 0x0);
 80001e6:	2300      	movs	r3, #0
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	2300      	movs	r3, #0
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	2300      	movs	r3, #0
 80001f0:	2201      	movs	r2, #1
 80001f2:	2102      	movs	r1, #2
 80001f4:	480f      	ldr	r0, [pc, #60]	@ (8000234 <main+0x60>)
 80001f6:	f000 f853 	bl	80002a0 <GPIO_Init>

    // Configure PB3 as input with pull-down resistor
    GPIO_Init(GPIOB, 3, 0x0, 0x0, 0x0, 0x2);
 80001fa:	2302      	movs	r3, #2
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	2300      	movs	r3, #0
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2200      	movs	r2, #0
 8000206:	2103      	movs	r1, #3
 8000208:	480b      	ldr	r0, [pc, #44]	@ (8000238 <main+0x64>)
 800020a:	f000 f849 	bl	80002a0 <GPIO_Init>

    while(1) {
        // Check if button (PB3) is pressed (reads HIGH)
        if(GPIO_ReadInputPin(GPIOB, 3) == 1) {
 800020e:	2103      	movs	r1, #3
 8000210:	4809      	ldr	r0, [pc, #36]	@ (8000238 <main+0x64>)
 8000212:	f000 f8ca 	bl	80003aa <GPIO_ReadInputPin>
 8000216:	4603      	mov	r3, r0
 8000218:	2b01      	cmp	r3, #1
 800021a:	d105      	bne.n	8000228 <main+0x54>
            GPIO_WriteOutputPin(GPIOA, 2, 1);  // Turn ON LED
 800021c:	2201      	movs	r2, #1
 800021e:	2102      	movs	r1, #2
 8000220:	4804      	ldr	r0, [pc, #16]	@ (8000234 <main+0x60>)
 8000222:	f000 f89c 	bl	800035e <GPIO_WriteOutputPin>
 8000226:	e7f2      	b.n	800020e <main+0x3a>
        } else {
            GPIO_WriteOutputPin(GPIOA, 2, 0);  // Turn OFF LED
 8000228:	2200      	movs	r2, #0
 800022a:	2102      	movs	r1, #2
 800022c:	4801      	ldr	r0, [pc, #4]	@ (8000234 <main+0x60>)
 800022e:	f000 f896 	bl	800035e <GPIO_WriteOutputPin>
        if(GPIO_ReadInputPin(GPIOB, 3) == 1) {
 8000232:	e7ec      	b.n	800020e <main+0x3a>
 8000234:	40020000 	.word	0x40020000
 8000238:	40020400 	.word	0x40020400

0800023c <GPIO_EnableClock>:


#include "STM32f401xx.h"
#include "STM32f401_gpio.h"

void GPIO_EnableClock(GPIO_RegDef_t *pGPIOx){
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	if(pGPIOx == GPIOA){
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4a12      	ldr	r2, [pc, #72]	@ (8000290 <GPIO_EnableClock+0x54>)
 8000248:	4293      	cmp	r3, r2
 800024a:	d106      	bne.n	800025a <GPIO_EnableClock+0x1e>
		RCC->AHB1ENR |=(1<<0);
 800024c:	4b11      	ldr	r3, [pc, #68]	@ (8000294 <GPIO_EnableClock+0x58>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000250:	4a10      	ldr	r2, [pc, #64]	@ (8000294 <GPIO_EnableClock+0x58>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6313      	str	r3, [r2, #48]	@ 0x30
	}else if(pGPIOx == GPIOB){
		RCC->AHB1ENR |=(1<<1);
	}else if(pGPIOx == GPIOC){
		RCC->AHB1ENR |=(1<<2);
	}
}
 8000258:	e014      	b.n	8000284 <GPIO_EnableClock+0x48>
	}else if(pGPIOx == GPIOB){
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4a0e      	ldr	r2, [pc, #56]	@ (8000298 <GPIO_EnableClock+0x5c>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d106      	bne.n	8000270 <GPIO_EnableClock+0x34>
		RCC->AHB1ENR |=(1<<1);
 8000262:	4b0c      	ldr	r3, [pc, #48]	@ (8000294 <GPIO_EnableClock+0x58>)
 8000264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000266:	4a0b      	ldr	r2, [pc, #44]	@ (8000294 <GPIO_EnableClock+0x58>)
 8000268:	f043 0302 	orr.w	r3, r3, #2
 800026c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800026e:	e009      	b.n	8000284 <GPIO_EnableClock+0x48>
	}else if(pGPIOx == GPIOC){
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4a0a      	ldr	r2, [pc, #40]	@ (800029c <GPIO_EnableClock+0x60>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d105      	bne.n	8000284 <GPIO_EnableClock+0x48>
		RCC->AHB1ENR |=(1<<2);
 8000278:	4b06      	ldr	r3, [pc, #24]	@ (8000294 <GPIO_EnableClock+0x58>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027c:	4a05      	ldr	r2, [pc, #20]	@ (8000294 <GPIO_EnableClock+0x58>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	40020000 	.word	0x40020000
 8000294:	40023800 	.word	0x40023800
 8000298:	40020400 	.word	0x40020400
 800029c:	40020800 	.word	0x40020800

080002a0 <GPIO_Init>:

void GPIO_Init(GPIO_RegDef_t *pGPIOx , int pinNumber , int mode , int speed , int outputType , int pull){
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
 80002ac:	603b      	str	r3, [r7, #0]
	pGPIOx->MODER &= ~(0x3 << (pinNumber * 2));
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	2103      	movs	r1, #3
 80002b8:	fa01 f303 	lsl.w	r3, r1, r3
 80002bc:	43db      	mvns	r3, r3
 80002be:	401a      	ands	r2, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	601a      	str	r2, [r3, #0]
	pGPIOx->MODER |= (mode << (pinNumber * 2));
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	6879      	ldr	r1, [r7, #4]
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	431a      	orrs	r2, r3
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	601a      	str	r2, [r3, #0]

	pGPIOx->OSPEEDER &= ~(0x3 << (pinNumber * 2));
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	689a      	ldr	r2, [r3, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	2103      	movs	r1, #3
 80002e2:	fa01 f303 	lsl.w	r3, r1, r3
 80002e6:	43db      	mvns	r3, r3
 80002e8:	401a      	ands	r2, r3
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	609a      	str	r2, [r3, #8]
	pGPIOx->OSPEEDER |= (speed << (pinNumber * 2));
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	689a      	ldr	r2, [r3, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	6839      	ldr	r1, [r7, #0]
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	431a      	orrs	r2, r3
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	609a      	str	r2, [r3, #8]

	pGPIOx->OTYPER &= ~(0x1 << (pinNumber));
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	685a      	ldr	r2, [r3, #4]
 8000306:	2101      	movs	r1, #1
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	43db      	mvns	r3, r3
 8000310:	401a      	ands	r2, r3
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	605a      	str	r2, [r3, #4]
	pGPIOx->OTYPER |= (outputType << (pinNumber));
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	685a      	ldr	r2, [r3, #4]
 800031a:	69b9      	ldr	r1, [r7, #24]
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	fa01 f303 	lsl.w	r3, r1, r3
 8000322:	431a      	orrs	r2, r3
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	605a      	str	r2, [r3, #4]

	pGPIOx->PUPDR &= ~(0x3 << (pinNumber * 2));
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	68da      	ldr	r2, [r3, #12]
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	2103      	movs	r1, #3
 8000332:	fa01 f303 	lsl.w	r3, r1, r3
 8000336:	43db      	mvns	r3, r3
 8000338:	401a      	ands	r2, r3
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	60da      	str	r2, [r3, #12]
	pGPIOx->PUPDR |= (pull << (pinNumber * 2));
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	68da      	ldr	r2, [r3, #12]
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	69f9      	ldr	r1, [r7, #28]
 8000348:	fa01 f303 	lsl.w	r3, r1, r3
 800034c:	431a      	orrs	r2, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	60da      	str	r2, [r3, #12]
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <GPIO_WriteOutputPin>:

void GPIO_WriteOutputPin(GPIO_RegDef_t *pGPIOx , int pinNumber , int value ){
 800035e:	b480      	push	{r7}
 8000360:	b085      	sub	sp, #20
 8000362:	af00      	add	r7, sp, #0
 8000364:	60f8      	str	r0, [r7, #12]
 8000366:	60b9      	str	r1, [r7, #8]
 8000368:	607a      	str	r2, [r7, #4]
	if(value == 1){
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d109      	bne.n	8000384 <GPIO_WriteOutputPin+0x26>
		pGPIOx->ODR |= (1 << pinNumber);
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	2101      	movs	r1, #1
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	fa01 f303 	lsl.w	r3, r1, r3
 800037c:	431a      	orrs	r2, r3
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	615a      	str	r2, [r3, #20]
	}else if (value == 0){
		pGPIOx->ODR &= ~(1 << pinNumber);  // ✅ Fixed issue
	}
}
 8000382:	e00c      	b.n	800039e <GPIO_WriteOutputPin+0x40>
	}else if (value == 0){
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d109      	bne.n	800039e <GPIO_WriteOutputPin+0x40>
		pGPIOx->ODR &= ~(1 << pinNumber);  // ✅ Fixed issue
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	695a      	ldr	r2, [r3, #20]
 800038e:	2101      	movs	r1, #1
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43db      	mvns	r3, r3
 8000398:	401a      	ands	r2, r3
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	615a      	str	r2, [r3, #20]
}
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <GPIO_ReadInputPin>:

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, int pinNumber){
	pGPIOx->ODR ^= (1 << pinNumber);
}

int GPIO_ReadInputPin(GPIO_RegDef_t *pGPIOx, int pinNumber){
 80003aa:	b480      	push	{r7}
 80003ac:	b083      	sub	sp, #12
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	6039      	str	r1, [r7, #0]
	return ((pGPIOx->IDR >> pinNumber) & 0x1);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	691a      	ldr	r2, [r3, #16]
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	fa42 f303 	asr.w	r3, r2, r3
 80003be:	f003 0301 	and.w	r3, r3, #1
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d0:	480d      	ldr	r0, [pc, #52]	@ (8000408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d8:	480c      	ldr	r0, [pc, #48]	@ (800040c <LoopForever+0x6>)
  ldr r1, =_edata
 80003da:	490d      	ldr	r1, [pc, #52]	@ (8000410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <LoopForever+0xe>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f0:	4c0a      	ldr	r4, [pc, #40]	@ (800041c <LoopForever+0x16>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003fe:	f000 f811 	bl	8000424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000402:	f7ff fee7 	bl	80001d4 <main>

08000406 <LoopForever>:

LoopForever:
  b LoopForever
 8000406:	e7fe      	b.n	8000406 <LoopForever>
  ldr   r0, =_estack
 8000408:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800040c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000410:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000414:	0800048c 	.word	0x0800048c
  ldr r2, =_sbss
 8000418:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800041c:	2000001c 	.word	0x2000001c

08000420 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000420:	e7fe      	b.n	8000420 <ADC_IRQHandler>
	...

08000424 <__libc_init_array>:
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	4d0d      	ldr	r5, [pc, #52]	@ (800045c <__libc_init_array+0x38>)
 8000428:	4c0d      	ldr	r4, [pc, #52]	@ (8000460 <__libc_init_array+0x3c>)
 800042a:	1b64      	subs	r4, r4, r5
 800042c:	10a4      	asrs	r4, r4, #2
 800042e:	2600      	movs	r6, #0
 8000430:	42a6      	cmp	r6, r4
 8000432:	d109      	bne.n	8000448 <__libc_init_array+0x24>
 8000434:	4d0b      	ldr	r5, [pc, #44]	@ (8000464 <__libc_init_array+0x40>)
 8000436:	4c0c      	ldr	r4, [pc, #48]	@ (8000468 <__libc_init_array+0x44>)
 8000438:	f000 f818 	bl	800046c <_init>
 800043c:	1b64      	subs	r4, r4, r5
 800043e:	10a4      	asrs	r4, r4, #2
 8000440:	2600      	movs	r6, #0
 8000442:	42a6      	cmp	r6, r4
 8000444:	d105      	bne.n	8000452 <__libc_init_array+0x2e>
 8000446:	bd70      	pop	{r4, r5, r6, pc}
 8000448:	f855 3b04 	ldr.w	r3, [r5], #4
 800044c:	4798      	blx	r3
 800044e:	3601      	adds	r6, #1
 8000450:	e7ee      	b.n	8000430 <__libc_init_array+0xc>
 8000452:	f855 3b04 	ldr.w	r3, [r5], #4
 8000456:	4798      	blx	r3
 8000458:	3601      	adds	r6, #1
 800045a:	e7f2      	b.n	8000442 <__libc_init_array+0x1e>
 800045c:	08000484 	.word	0x08000484
 8000460:	08000484 	.word	0x08000484
 8000464:	08000484 	.word	0x08000484
 8000468:	08000488 	.word	0x08000488

0800046c <_init>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr

08000478 <_fini>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	bf00      	nop
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr
